; Backus Naur Form https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form 
; Of the logic syntax


; some basic syntax 
<lowercase> ::= "a" | "b" | "c" ... ; and so on 
<uppercase> ::= "A" | "B" | "C" ... ; and so on 
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<id> ::= <lowercase> | <lowercase><id>

; a namespace is a collection of 0 or more clauses, typically in a file (module like)
<namespace> ::= <id> ":" "{" <clauses> "}" 
<clauses> ::= <clause> | <clause> <clauses>

; A clause is a proposition logic formula in the form of an implication
; Even if the simplest form of a single predicate, it's technical true -> <consequent> 
<clause> ::= <implication> 
<implication> ::= <predicate> | <consequent> ":" <antecedent>
<consequent> ::= <predicate>
; np antecedent and consequent are just the member name of the the types in a clause
; The antecedent is an expression that evaluates to either true or false. If it's true the consequent is true 
<antecedent> ::= <expression> 

; A predicate is a single logical element the truth of which can be determined or stated it can be an axiom or a function
; after parsing (where the round braces are optional), internally an axiom is simply a function with zero arguments
<predicate> ::= <axiom> | <function>
<axiom> ::= <id>

; A function is a predicate with some additional arguments. These arguments can be expressions or variables. They can be matched by comparing them (operator==)
<function> ::= <id>"(" <arguments> ")"
<arguments> "" | <argument> | <argument> | <argument>, <arguments>
<argument> ::= <expression> | <variable> 

; an expression is something with a computable value. This can be a singular value, an operation 
; TODO: also functions that return values? how cat(X) : legs(sin(X))
<expression> ::= <value> | <operation> 

; values are simple data types, collections or predicates that may be true or false 
<value> ::= <simple> | <collection> | <predicate> 
; The simple data types are boolean, integer, float, string
<simple> ::= <boolean> | <integer> | <float> | <string>
<boolean> ::= "true" | "false"
<integer> ::= <digits> | "-" <digits>
<digits> ::= <digit> | <digit><digits>
<float> ::= <digits>"."<digits> ; TODO: exponential form, negative, infinite, nan? 

; collections are zero or more expressions. They can be ordered/unordered, unique/non unique
<collection::= <array> | <set> 
; an array is ordered and non unique
<array> ::= "[" <elements> "]"
<elements> ::= "" | <expression> | <expression>, <elements> ; TODO: this could parse 1,2,3, 
; a set is unordered unique elements
<set> ::= "{" <elements> "}"
; TODO: does anyone really care about unordered unique or multiset (unordered non unique)

<sequence elements> ::= <sequence elements> "," <expression>
<collection sequence> ::= "(" <sequence elements> ")" | <sequence elements>
<empty sequence> ::= "(" ")"
<single sequence> ::= "(" <expression> ")"
<sequence> ::= <empty sequence> | <single sequence> | <collection sequence>


; The supported operations are: 
;   n-ary: conjunction, disjunction, summation, multiplication
;   binary: division, power, contained, slice 
;   unary: negation 
<operation> : <conjunction> | <disjunction> | <summation> | multiplication | <division> | <power> | <negation> | <logical_negation>
<negation> ::= "-" <expression> ] ; if the expression is not float, casts to integer and results in the negation
<logical_negation> ::= "!" <expression> ; casts expression to bool and results the negation
<conjunction> ::= <expression> "&" <expression> ; casts both expressions to boolean, and is true if both are 
<disjunction> ::= <expression> "|" <expression>  ; casts both expressions to boolean and is true if one is 
<summation> ::= <expression> "+" <expression>  ; <if one of the expression is float, casts the other to float, otherwise casts both to integer, then adds them 
<multiplication> ::= <expression> "*" <expression> ; <same with the casting, then multiplies. also casts to float if the result is out of integer range> 
<division> ::= <expression> "/" <expression> ; casts both sides to float, then divides them 
<power> ::= <expression> "^" <expression> ; same with the casting. if either is float or the result is out of float range or the second expression is negative, then uses float
<contained> ::= <expression> "@" <expression> ; casts the second expression to a set, then checks if the other expression is in it 
<slice> ::= <expression>"[" <range> "]" ; casts the first expression to an array and the range to integer, then returns the subset 


; a range is a set of integer or floating point values



