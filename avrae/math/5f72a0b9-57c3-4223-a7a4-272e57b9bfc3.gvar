## math library for avrae
## By Velglarn#4688, countpauper@gmail.com
## Documentation: https://github.com/countpauper/countpauper/tree/master/avrae/math/math_lib.md

### For unit testing, import dependencies
try:
    from avrae import * 
except "FeatureNotAvailable":
    pass

e =  2.718281828459045
pi = 3.141592653589793
tau = pi * 2.0
inf = float('inf')
nan = float('nan')
_rad2deg = 180/pi

def isnan(x):
    return not (x == x)

def isinf(x):
    return x == inf

def isclose(a,b, rel_tol=1e-9, abs_tol=0):
    if rel_tol < 0 or abs_tol < 0:
        return False
   
    if a==b:
        return True
    diff = abs(a-b)
    return diff <= abs(rel_tol * (a + b) / 2) or diff < abs_tol
      
def squareroot(x):
    if x<0:
        return nan
    return sqrt(x)

#NB Not like math prod since the default start value is one 
# and the first arguments are not iterable but iteration is done over all arguments 
def prod(*values):
    result = 1
    for v in values:
        result *= v
    return result

#NB not the same as built in pow except when called with 2 arguments.
#  Doesn't take 3 weird arguments but 1 iterable and computes the power sequentially
# the default value is 1 so with no args it's 1^1
def pow(*args):
    if not args:
        return 1
    result = args[0]
    for p in args[1:]:
        result **= p
    return result

def __TaylorLn(x):
    if x==1:
        return 0
    iterations = 20+2*int(x)
    result = 0
    A = (x-1) / (x+1)
    for i in range(iterations):
        k = 2*i + 1
        result += A**k / k 
    return 2.0 * result

def _base10_exp(x):
    return int(f'{x:e}'.split('e')[1])

def log(x, base=None):
    if x <= 0:
        return nan
    if base is None:
        if isinf(x):
            return inf
        # __TaylorLn converges for x<1
        # because log(a*b) = log(a)+log(b) bigger x are split 
        # into their mantissa and base 10 exponent
        exp = _base10_exp(x)
        if exp:
            mantissa = x / 10**exp
            # The mantissa's log is computed 
            log10 = 2.302585092994046 
            mantissa_log = __TaylorLn(mantissa)
            exp_log = exp*log10
            return mantissa_log+exp_log
        else:
            return __TaylorLn(x)
    else:
        return log(x)/log(base)
    
def factorial(n):
    if n<=1:
        return 1
    if isinf(n):
        return inf
    n = int(floor(n))
    return prod(*range(2,n+1))

def comb(n, k):    
    if n<0 or k<0:
        err("binomial coefficient not defined for negative input")
    if k > n:
        return 0
    if isinf(n):
        return inf
    
    # Pascal's triangle method may require some memory and is O(nk)
    # But straight up n! / k! * (n-k)! has numeric issues for larger n
    C=list()
    for i in range(0, n+1):
        Ci = list()
        for j in range(0, min(i, k)+1):
            if j == 0 or j == i:
                Ci.append(1) 
            else:
                Ci.append(C[i-1][j-1] + C[i-1][j])
        C.append(Ci)
    return C[n][k];

def degrees(rad):
    return rad * _rad2deg

def radians(deg):
    return deg / _rad2deg
        
def _NormalizeRad(r):
    if isinf(r) or isinf(-r):
        err("Domain error: infinity radians.")
    extra = floor(r/tau) if r > 0 else ceil(r/tau)
    return r - extra * tau

def __TaylorSin(x):
    if x==0:
        return 0
    iterations = 10
    result = 0
    factorial_div = 1.0
    power = 1
    for i in range(iterations):
        power = 1+i*2
        if i%2==0:
            result += x**power / factorial_div
        else:
            result -= x**power / factorial_div 
        factorial_div *= (power+1)*(power+2)
    return result


def sin(x):
    return __TaylorSin(_NormalizeRad(x))

def __TaylorCos(x):
    if x==0:
        return 1        
    iterations = 10
    result=1    # start with first because factorial(0) == 1 
    factorial_div = 2.0
    for i in range(iterations):
        power = (i+1)*2
        if i%2==0:
            result -= x**power / factorial_div
        else:
            result += x**power / factorial_div
        factorial_div *= (power+1) * (power+2)
    return result

def cos(x):
    return __TaylorCos(_NormalizeRad(x))

def tan(x):
    cosx = cos(x)
    sinx = sin(x)
    if cosx==0:
        if sinx>=0:
            return inf
        else:
            return -inf
    else:
        return sinx/cosx

def __NewtonAtan(x):
    if x==0:
        return 0
    
    # if abs(x)>1 convergence is slow use the atan(x) + atan(1/x) = +/-pi/2 identity
    if x > 1:
        return (pi/2) - __NewtonAtan(1/x)
    elif x < -1:
        return -(pi/2) - __NewtonAtan(1/x)
    
    # heuristic to optimize number of iterations required for accurate convergence (<1e-9) 
    # based on size of x
    iterations = 10+int(abs(x)*20)
    
    # Newton's accelerated atan convergence series 
    # see:  https://en.wikipedia.org/wiki/Arctangent_series
    Cx = 1.0/sqrt(1+x*x)
    Sx = x*Cx
    mul = 1
    A = Sx
    result = mul * A
    for i in range(1, iterations+1):
        mul*= (i*2)/(i*2.0+1.0)
        A *= Sx * Sx        
        result += mul * A
    return Cx * result

def atan(x):
    return __NewtonAtan(x)

def atan2(y,x):
    if x > 0:
        return atan(y/x)
    elif x < 0:
        if y >= 0:
            return atan(y/x) + pi
        else:
            return atan(y/x) - pi
    else:   # x==0
        if y > 0:
            return pi/2
        elif y<0:
            return -pi/2
        else:
            return nan

def dist(p, q):
    return sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))

def hypot(*coordinates):
    return sqrt(sum(p**2 for p in coordinates))

