try:
    from avrae import * 
    from gvar import * 
    math = import_gvar("math/5f72a0b9-57c3-4223-a7a4-272e57b9bfc3.gvar", "math")
except "FeatureNotAvailable":
    using(math="5f72a0b9-57c3-4223-a7a4-272e57b9bfc3")


### Parse
sub_minus = "−"
ops_levels = [
    {',': 'tuple'},                        # Level 0: lowest precedence
    {'+': 'sum', sub_minus: 'sub'},       # Level 1: addition/subtraction
    {'*': 'prod', '/': 'div'},            # Level 2: multiplication/division
    {'^': 'pow'},                         # Level 3: exponentiation
]

def parse_lhs_brackets(s):
    pos = 0
    if s[pos] != '(':
        return False, s 
    depth = 1
    while depth:
        close = s.find(')', pos + 1)
        open = s.find('(', pos + 1)
        if close < 0:
            err(f"Unmatched brace in {s}")
        elif open < 0 or open > close:
            depth -= 1
            pos = close
        else:
            pos = open
            depth += 1
    return s[1:pos], s[pos + 1:]

def parse_rhs_brackets(s):
    open = s.find('(')
    if open < 1:
        return s, False, ""
    else:
        brace_str, remaining = parse_lhs_brackets(s[open:])
        return s[:open], f"({brace_str})", remaining

def simplify(expression):
    if typeof(expression) == 'SafeDict':
        if len(expression) == 1 and (t := expression.get("tuple")):
            return t
    if typeof(expression) == 'SafeList' or typeof(expression) == 'tuple':
        if len(expression) == 1:
            return expression[0]
    return expression

def parse_fn(s):
    fn, params, remaining = parse_rhs_brackets(s)
    if params is not False and fn.isidentifier():
        parsed_params = simplify(parse(params))
        return {fn: parsed_params}, remaining
    else:
        return False, s

def parse_op(s):
    for level in ops_levels:
        for op in level:
            if op not in s:
                continue
            terms = []
            depth = 0
            start = 0
            for i, c in enumerate(s):
                if c == '(':
                    depth += 1
                elif c == ')':
                    depth -= 1
                elif c == op and depth == 0:
                    terms.append(s[start:i])
                    start = i + 1
            terms.append(s[start:])
            if len(terms) > 1:
                if any(not t for t in terms):
                    err(f"Missing term in {s}")
                return {level[op]: [parse(term) for term in terms]}
    return False

def parse_remaining(c, remaining):
    if not remaining:
        return c
    for level in ops_levels:
        op = remaining[0]
        if op in level:
            return {level[op]: [c, parse(remaining[1:])]}
    return {'prod': [c, parse(remaining)]}

def parse_preparsed_float(s):
    s = s.replace("e", "e-").replace("E", "e+")
    return float(s)

consts = dict(pi=math.pi, e=math.e, π=math.pi)
def parse_value(s):
    if s in consts:
        return consts[s]
    if s.isdecimal():
        return int(s)
    else:
        return parse_preparsed_float(s)

def prescan_negative(s):
    result = ""
    before_neg = ",-+/*^("
    negative = True
    for c in s:
        if c == "-" and not negative:
            result += sub_minus
            negative = True
        else:
            negative = c in before_neg
            result += c
    return result

def find_one_of(s, options, pos=0):
    found = [s.find(option, pos) for option in options]
    best = len(s)
    best_idx = None
    for idx, f in enumerate(found):
        if f > 0 and f < best:
            best = f
            best_idx = idx
    return best, best_idx

def prescan_exponents(s):
    result = s
    before_exponent = "0123456789."
    pos = 0
    while pos >= 0:
        next_pos, option = find_one_of(result, ("e+", 'E+', 'e-', 'E-'), pos)
        if option is None:
            return result
        if result[next_pos - 1] in before_exponent:
            replacement = "Ee"[option // 2]
            result = result[:next_pos] + replacement + result[next_pos + 2:]
        pos = next_pos + 2
    return result

def parse(s):
    s = str(s).replace(" ", "")
    s = prescan_exponents(s)
    s = prescan_negative(s)

    if s[0] == '-':
        return {'neg': parse(s[1:])}
    braced_str, remaining = parse_lhs_brackets(s)
    if braced_str:
        return parse_remaining(parse(braced_str), remaining)
    fn, remaining = parse_fn(s)
    if fn:
        return parse_remaining(fn, remaining)
    premaining, braced_str, remaining = parse_rhs_brackets(s)
    if braced_str and premaining[-1] in ''.join(k for level in ops_levels for k in level):
        return parse_remaining(
            parse(premaining[:-1]), 
            premaining[-1] + braced_str + remaining
        )

    if op := parse_op(s):
        return op
    return parse_value(s)


### Compute
numeric_types = ("int", "float")
ListType = 'SafeList'

def compute_args(arg):
    if typeof(arg) == ListType:
        result = [compute(a) for a in arg]
    else:
        result = compute(arg)
        if typeof(result) != ListType:
            result = [result]
    if any(typeof(a) not in numeric_types for a in result):
        err(f"nested tuple in {arg}")
    else:
        return result

def compute_fn(fn, arg):
    cargs = compute_args(arg)
    if fn == 'sum':
        return sum(cargs)
    elif fn == 'sub':
        return cargs[0] - sum(cargs[1:])
    elif fn == 'prod':
        return math.prod(*cargs)
    elif fn == 'div':
        return cargs[0] / sum(cargs[1:])
    elif fn == 'pow':
        return math.pow(*cargs)
    elif fn == 'neg':
        return -cargs[0]
    elif fn == 'tuple':
        return cargs
    elif fn == "sqrt":
        return math.squareroot(*cargs)
    elif fn == "log":
        return math.log(*cargs)
    elif fn == 'deg':
        return math.degrees(*cargs)
    elif fn == 'rad':
        return math.radians(*cargs)
    elif fn == "sin":
        return math.sin(*cargs)
    elif fn == "cos":
        return math.cos(*cargs)
    elif fn == "tan":
        return math.tan(*cargs)
    elif fn == "atan":
        return math.atan(*cargs)
    elif fn == "atan2":
        return math.atan2(*cargs)
    elif fn == 'asin':
        return math.asin(cargs[0])
    elif fn == 'acos':
        return math.acos(cargs[0])
    elif fn == "factorial":
        return math.factorial(*cargs)
    elif fn == "comb":
        return math.comb(cargs[0], cargs[1])
    elif fn == 'perm':
        return math.perm(cargs[0], cargs[1])
    elif fn == 'gcd':
        return math.gcd(*cargs)
    elif fn == 'lcm':
        return math.lcm(*cargs)
    elif fn == 'norm':
        return math.hypot(*cargs)
    else:
        return f"Unknown function {fn}"

def compute(c):
    if typeof(c) == 'SafeDict':
        result = [compute_fn(fn, a) for fn, a in c.items()]
        return simplify(result)
    else:
        return c


### Present
reverse_ops = {}
for level in ops_levels:
    for k, v in level.items():
        reverse_ops[v] = k

def present_sequence(fn, params):
    operator = reverse_ops[fn]
    return f"({f' {operator} '.join(params)})"

def present_fn(fn, arg):
    if typeof(arg) == ListType:
        pargs = [present_with_brackets(a) for a in arg]
    else:
        pargs = [present_with_brackets(arg)]
    if fn in reverse_ops:
        return present_sequence(fn, pargs)
    if fn == 'neg':
        return f"-{strip_brackets(str(pargs[0]))}"
    return f"{fn}( {', '.join(strip_brackets(str(a)) for a in pargs)} )"

def strip_brackets(s):
    while s and s[0] == "(" and s[-1] == ")":
        s = s[1:-1]
    return s

def present_with_brackets(c):
    if typeof(c) == 'SafeDict':
        result = [present_fn(fn, cargs) for fn, cargs in c.items()]
        return simplify(result)
    else:
        return str(c)

def present(c):
    result = present_with_brackets(c)
    if typeof(result) == 'str':
        result = strip_brackets(result)
    return result
