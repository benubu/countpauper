[done] retrieve inventory
[done] handle command execution exceptions as user facing errors
[done] unit test for dice
[done] unit tests for character
[done] unit tests for items and heavy shield
[done] unit tests for database
[done] execute sql commands with """:key""", dict(key=value) to automatically '' and for safety of JOHNNY'); DROP TABLE (seems to already prevent more than one command)
[done] database transactions and auto commit and use cursor.close() or with connection or something to refactor multi query atomic operations and make them efficient
[done] unit tests for commands (split commands into testable units? or mock context?)
[done] attack
[done] boni
[done] action points (stat) and $turn command
initial skills
    [done] random skill assignment
    [done] execute skill command
    [done] execute targeted skill and persist targets
    [done] find a way to inject d20 roll results into unit tests to make the ability tweaking less finicky and results more predictable
        [done] Try to override roller in dice with a minimum/maximum result (default is to call roll). preferably as a fixture that sets it back

    - two skill each for physical, mental, social (parry, crosscut done.
        [done] Explosion (mental attack to all, elemental dmg. Does it ignore armor?)
        [done] scare (social damage vs mental save (or reversed? but that's illusion), morale dmg)
        [done] heal: mental damage die hp healed (max hp is like 13 so 2d12 is a lot? how to power that up?)
        [done] familiar (summon. can be in combat? create in db. Keep it simple. Use one mp, it stays until the next rest)
        [done] encourage
        [done] harmony (1 defense to targets, max targets is social score)
        [done] pass actor of skill to constructor of it instead of __call__

    - assign random skills based on primary stat IF available points to use at least once  (one of matching ability for each stat over ~2)
    - return embedable data from skills, attack
    - generate monster with skills (sets for each type, eg beast, dragon, undead?)
        - pounce (aka charge, damage bonus depends on ... size? physical that's double)
    - One AoE attack and test command for some characters known, some not known
- show dice :four: :six: :eight: :keycap_ten:  :one::two: in sheet
[done] represent flat bonuses above 1 in Dice
[done] random characters and monsters above level 1
[done] character to str just instead of Name(), repr for elaborate description
portrait and color command
rest command (resets hp, pp mp and ap and clears all effects with durations)
    - clear familiar. Add as effect?
Check if can attack or motivated enough to offend for skills
Reimplement actions (attack, cover) as "Free Skills". Don't add them to skills, just attack() = execute(Attack(), targets, bonus). Derive SKill from Action? What about passive skill?
    - make cover a mental skill, it requires 1 mental ability. Make it defensive.
    - make attacking a Physical skill, it requires >0 physical (does it? move dice over?). Make it offensive of course. It requires motivation

[done] level up command, argument is ability to raise
some command to enter/exit combat so action point tracking is disabled. forced when engaged/attacking? but also manual if first moving.
[done] organize commands in cogs (well, mostly game cog)
partial matching for taking and dropping items
partial matching for finding database characters
   - refactor implementation to self target without getting from database twice (executor==target) in skill/attack etc commands (now already needs
   case insensitive matching between argument and easlier character name)
    - track dirty flag in characters to see if they need stored (should be an optimization only)
Cog specific error handling, https://guide.pycord.dev/popular-topics/error-handling
[done] character worn can be a list for jewelry and multi part armor?
derived dice stat for attack and defend dice, add dice together with Dice bonuses for items (and effects/skills)
    - all heavy weapons just have the Dice(4) bonus to attack
    - refactor adding bonus dict of dice, instead add "remarks"/sources to the dice themselves and the get_boni() directly returns Dice.
    - Add dice source remarks into the roll for clarity?
jewelry (wearable item with bonuses)
indicate into embed field in sheet which item is main/off (dual wield or shield) and worn. emojis? but no armor emoji. Just use :shirt: and :ring: for accesories
use command: switch item main/offhand if appropriate, also wear armor. (3 ap?) maybe just use and also costs ap to use whatever or usable item in inventory is activated. may cost ap if destination is not empty
move command: just costs an ap
    set location to argument
    compute distance for ap
    only perform the move if the ap is sufficient, error with required ap (and plan) if not sufficient
    move towards target's location if specified as argument
    ? move away from target
    argument for swim or climb
    automatically get up if down and ap available
    automatically disengage if ap available
game commands more tests for user input handling and error reporting
keep character up to date with database without having to store/restore the whole time, even during test? like some sort of db cache and character is just a wrapper?
    - can probably do it with more Descriptors (although very layered) where the real value is straight in the database. Update one property at a time
    - commit at the end of a command, all characters involved.
automatic penalty for subsequent per turn and end turn command
    - also automatic tracking for dual wield switch (boolean) and reset per turn
    - Crosscut skill should start with current attack penalty and all attack skills should increaase it
    ? Does all this state really need to be persisted? or maybe it's an "effect", hidden effects ?

Upcast all skills
item database with named types (Type+properties)
position in character and database
combat database (is that where to keep position? only allow targetting combat characters ? add channel to combat?)
Add the random item system from the tactics game with the materials and stuff
level bonus and penalty: extra stats and skills and loss of stats and skills, but which ? (just raising/lowering hp is lame)
Make automated battles of N lower level characters agains 1 higher levels, ability and ability and so on
    - Give all skills (and other Actions) an AI function to score being used on a target.
    - Give the result in number of survivors and remaining total hp

undo command that restores previous character state
