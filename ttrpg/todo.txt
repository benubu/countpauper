[done] retrieve inventory
[done] handle command execution exceptions as user facing errors
[done] unit test for dice
[done] unit tests for character
[done] unit tests for items and heavy shield
[done] unit tests for database
[done] execute sql commands with """:key""", dict(key=value) to automatically '' and for safety of JOHNNY'); DROP TABLE (seems to already prevent more than one command)
[done] database transactions and auto commit and use cursor.close() or with connection or something to refactor multi query atomic operations and make them efficient
[done] unit tests for commands (split commands into testable units? or mock context?)
[done] attack
initial skills and random skill assignment
keep character up to date with database without having to store/restore the whole time, even during test? like some sort of db cache and character is just a wrapper?
    - also from character test with some sort of event? or just the character that was retrieved keeps itself up to date?
    - What about those public properties like hp, portrait and all that. how to know "cache" is dirty
[done] represent flat bonuses above 1 in Dice
random characters and monsters above level 1
[done] organize commands in cogs (well, mostly game cog)
Cog specific error handling, https://guide.pycord.dev/popular-topics/error-handling
character database dirty flags (props, inventory, skills) to optimize updates
character worn can be a list for jewelry and multi part armor?
attack with bonus
automatic bonus for attacker per turn and end turn command, also track action points?
game commands more tests for user input handling and error reporting
turn tracking (action points and attack penalty)
item database with named types (Type+properties)
position in character and database
combat database (is that where to keep position? only allow targetting combat characters ? add channel to combat?)
