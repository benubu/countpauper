Big TODO/reason this project is stalled:
The increasing die size mechanism doesn't scale well, especially at low stats or character
that min/max. It is pretty easy for a defense score (even if based on just the stat #) to exceed the die size to the point
there is 0% chance to hit or miss with a d4, d2 let alone a d1. Adding in flat bonuses from magic/items makes this worse. On
the other hand not raising a stat at all makes it nearly impossible to defend against an attack because even rolling ones
on three dice might beat a 3 point score. Despecializing might seem required for defense but still very ineffective
statistically (putting 3 points in a defensive stat makes defending possible but still highly unlikely 3d6 vs 5 hits 98%
So racing the main attack stat to maximum (15 I guess) is required, not a freedom, to keep up with same main stat but
redundant against others. After that picking a 2nd stat feels forced. The whole game becomes rock paper scissors.

Four levels of stats (0-3, dice 0, d1, d2, d4) are reserved for debuffed character, racial penalties and weak enemies that are supposed
to pose a challenge in groups. They don't. A d4 will never hit a defense score of 5 which a player could easily have at level 1.

Some high levels (>15) should be reserved for above player levels to provide the opposite end for bufs and strong  monsters
that require a team to take on.
There are 20 dice levels. Reserving 4+6 leaves very few levels for the players to advance in (~10) without forcing despecialization
or only give one stat boost per level. If two stats are boosted a player would achieve max in two stats at only level 10.
10 levels may be sort of ok for a small game.
Adding extra levels on top just becomes a crazy amount of dice, which means a high lower limit (number of dice).

Another option is to allow criticals to at least sometimes hit or miss, but it's hard to come up with a good criterion that
is consistent with differenent dice. Rolling max on a d2/d4 is way too easy. Exploding dice gets complicated and hard to
balance/AI.

too few levels to expand in the existing dice range (up to 3d12) to even give 10 levels of progress without forcing despecialization.



Adding flat bonuses like armor/magic items in makes this worse and for attack bonuses
also may make it impossible to miss low defense stats.
ma


[done] retrieve inventory
[done] handle command execution exceptions as user facing errors
[done] unit test for dice
[done] unit tests for character
[done] unit tests for items and heavy shield
[done] unit tests for database
[done] execute sql commands with """:key""", dict(key=value) to automatically '' and for safety of JOHNNY'); DROP TABLE (seems to already prevent more than one command)
[done] database transactions and auto commit and use cursor.close() or with connection or something to refactor multi query atomic operations and make them efficient
[done] unit tests for commands (split commands into testable units? or mock context?)
[done] attack
[done] boni
[done] action points (stat) and $turn command
initial skills
    [done] random skill assignment
    [done] execute skill command
    [done] execute targeted skill and persist targets
    [done] find a way to inject d20 roll results into unit tests to make the ability tweaking less finicky and results more predictable
        [done] Try to override roller in dice with a minimum/maximum result (default is to call roll). preferably as a fixture that sets it back

    - two skill each for physical, mental, social (parry, crosscut done.
        [done] Explosion (mental attack to all, elemental dmg. Does it ignore armor?)
        [done] scare (social damage vs mental save (or reversed? but that's illusion), morale dmg)
        [done] heal: mental damage die hp healed (max hp is like 13 so 2d12 is a lot? how to power that up?)
        [done] familiar (summon. can be in combat? create in db. Keep it simple. Use one mp, it stays until the next rest)
        [done] encourage
        [done] harmony (1 defense to targets, max targets is social score)
        [done] pass actor of skill to constructor of it instead of __call__

    [done]  assign random skills based on primary stat IF available points to use at least once  (one of matching ability for each stat over ~2)
    [done] return embedable data from skills, attack. dicts, which are put in fields? Description is 'desc' field?
    [done] return effect result instead of most string result
    [done] summon result should be embedded with the summon's sheet
    [done] Character.__set_item__() find the right minimum/maximum for non counter types somehow
    - generate monster with skills (sets for each type, eg beast, dragon, undead?)
        - pounce (aka charge, damage bonus depends on ... size? physical that's double)
    - One AoE attack and test command for some characters known, some not known (in db) to test generic target collection
- show dice :four: :six: :eight: :keycap_ten:  :one::two: in sheet
[done] store characters by guild and author id to prevent name changes messing things up. thanks discord
[done] represent flat bonuses above 1 in Dice
[done] random characters and monsters above level 1
[done] character to str just instead of Name(), repr for elaborate description
[done]portrait command
[done] rest command (resets hp, pp mp and ap and clears all effects with durations)
    [done] clear familiar. Add as effect? (to summon)
    [done] clear unsummoned allies from database
    [done] rest also rests summons (and their effects)
    - summons in output (embed?) after rest (mini sheet with just counters and summon effect duration)
    [done] turn also turns summons (and their effects)
    - summons in output (embed?) after turn (mini sheet with just counters and summon effect duration)
    - add unsummoned creatures in output embed one last time?

Check if can attack or motivated enough to offend for skills
[done] Reimplement actions (attack, cover) as "Free Skills". Don't add them to skills, just attack() = execute(Attack(), targets, bonus). Derive SKill from Action? What about passive skill?

[done] level up command, argument is ability to raise
[done] organize commands in cogs (well, mostly game cog)
partial matching for taking and dropping items
partial matching for finding database characters (targets)
   [done] refactor implementation to self target without getting from database twice (executor==target) in skill/attack etc commands (now already needs
   case insensitive matching between argument and easlier character name)
   [done] This should also fix the BUG when attacking own familiar (target's hp overwritten when storing attacker's ally)
   [done] Might need a character cache
   - flushed database cache at the end of every command. This could also auto store (dirty) characters?
    - track dirty flag in characters to see if they need stored (should be an optimization only)
Cog specific error handling, https://guide.pycord.dev/popular-topics/error-handling
[done] character worn can be a list for jewelry and multi part armor?
derived dice stat for attack and defend dice, add dice together with Dice bonuses for items (and effects/skills)
    [done] all heavy weapons just have the Dice(4) bonus to attack
    - refactor adding bonus dict of dice, instead add "remarks"/sources to the dice themselves and the get_boni() directly returns Dice.
    - Add dice source remarks into the roll for clarity?
automatic penalty for subsequent per turn and end turn command
    - also automatic tracking for dual wield switch (boolean) and reset per turn
    - Crosscut skill should start with current attack penalty and all attack skills should increaase it
    ? Does all this state really need to be persisted? or maybe it's an "effect", hidden effects ?
help command which searches things for doc strings
    Abilities
    Skills (and other actions)
    Commands
generic command to execute skills or even all defined actions
    - what to do with skills with a camel case -> space
Upcasts for all skills:
    - command option to do it. any number argument?
    - Modify existing skills
jewelry (wearable item with bonuses)
indicate into embed field in sheet which item is main/off (dual wield or shield) and worn. emojis? but no armor emoji. Just use :shirt: and :ring: for accesories
use command: switch item main/offhand if appropriate, also wear armor. (3 ap?) maybe just use and also costs ap to use whatever or usable item in inventory is activated. may cost ap if destination is not empty
color command

=== Combat
some command to enter/exit combat (in channel?) so action point tracking is disabled. forced when engaged/attacking? but also manual if first moving.
combat database (is that where to keep position? only allow targetting combat characters ? add channel to combat?)
position in character and database
move command: just costs an ap
    set location to argument
    compute distance for ap
    only perform the move if the ap is sufficient, error with required ap (and plan) if not sufficient
    move towards target's location if specified as argument
    ? move away from target
    argument for swim or climb
    automatically get up if down and ap available
    automatically disengage if ap available
Run a http server with requests and serve up map images from embedded maps
- simple image, figure out the global ip somehow? does discord api know the bots ip?
- render a grid
- render characters in the channel at their position
- auto scale to number of characters/position ranges (+1?)


[done] game commands more tests for user input handling and error reporting
keep character up to date with database without having to store/restore the whole time, even during test? like some sort of db cache and character is just a wrapper?
    - can probably do it with more Descriptors (although very layered) where the real value is straight in the database. Update one property at a time
    - commit at the end of a command, all characters involved.

item database with named types (Type+properties)
Add the random item system from the tactics game with the materials and stuff
level bonus and penalty: extra stats and skills and loss of stats and skills, but which ? (just raising/lowering hp is lame)
Make automated battles of N lower level characters agains 1 higher levels, ability and ability and so on
    - Give all skills (and other Actions) an AI function to score being used on a target.
    - Give the result in number of survivors and remaining total hp

undo command that restores previous character state
