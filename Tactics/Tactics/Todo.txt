
==== Discrete version 
Lava
	* Generalize generation to all fluids
	* Generalize flowing to all fluids
	* Flow temperature averaging (or mostly copying when flooding gas)
	* Refactor Flow 
		x to PackedVoxel 
	* Spread Temperature: half directions bidirectional
	* Heat capacity 
	* Heat exchange rate based on ... ?
	- Packed voxel unit tests (especially temperature rounding), still see spontaneous freezing
    - Thickness flow speed (no seconds used currently) lava flows slower, chance?

Wind and air pressure
	- What happens to air/gas when flooding with liquid? 
	- Always air mass in a PackedVoxel, same with water (moist earth)
	- Heat up increases density ? 
Weather 
	- Puddle / water deposit particles (pre-steam)
	- Reabsorb puddle to water flow ? 
	- Waterall with particle
	- Clouds
	- Rain
	- Snow hail if it's cold
	- Snow deposit particles
Nature deposit: 
	- Map creation in height zone based on neighbours (water, air) and temperature 

=== Rendering 
- Optimize mesh generation in general 
- Partial mesh update (octree chunks. also to OpenGL?)

==== Game 
Combo Skill
Parry

==== Fluid dynamics version 
* Explicit wind
* Atmospheric pressure & temperature per meter, with z to meter
Explicit Atmosphere and Earth commands
* Render map as one mesh with vertex color & normal and separate triangles (don't change). 
* Render triangles as mesh in two passes, opaque and translucent (and not transparent)
* Render density gradient with false color
* Render temperature  with red channel
* Wall command start(xyz) Vector(xyz) Height, width (any 50% overlapping square is stone)
* Return Voxel data to voxels with just material, temperature, density
x Get signal nan to signal 
x Nan density corners
* Grow edges to include corners: up & down, 
* Fix flux out of bounds, match coordinates on graph paper (no -1?)
* Corners should take a DirectionS, for edge corners and full corners and to know how to extrapolate boundary (or use IsBoundary), also remove early out in FluxBoundary
Stone boundary flux = 0,0,0 (no wind) <- material interface: assume 100% cohesions/surface tension at first in both directions, later spread somehow
Stone boundary density
[partially ] Unit tests (before or after splitting fluid dynamics)
Make explicit boundary matrices for the directions, including corners: density, temperature, flux vector
	Commands: -> voxels and boundaries Evolve = Voxels + boundaries -> Voxels 
*Consider splitting fluid dynamics engine from voxel map for separation of concerns/unit testability to prepare for moving to gpu/eigen 
Reynolds number computation (need distance to surface per grid/direction)
Fix flux boundary extrapolation 
Temperature <-> pressure relation (flux)
Gravity -> flux
Explosion command (xyz, force)
Lake x,y,z   z = level, fill from there, water no flux 
River xyz dxyz=speed, fill from there 
Sea level, ?   sinoid flux, variable level or pressure for tide? 
